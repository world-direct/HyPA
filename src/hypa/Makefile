.PHONY: clean clean-build format test

clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	rm -fr build/
	rm -fr dist/
	rm -fr .eggs/
	find . \( -path ./env -o -path ./venv -o -path ./.env -o -path ./.venv \) -prune -o -name '*.egg-info' -exec rm -fr {} +
	find . \( -path ./env -o -path ./venv -o -path ./.env -o -path ./.venv \) -prune -o -name '*.egg' -exec rm -f {} +

clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +

clean-test: ## remove test and coverage artifacts
	rm -fr .tox/
	rm -f .coverage
	rm -fr htmlcov/
	rm -fr .pytest_cache

clean-rl: ## clean RL models and logs
	rm -rf logs/
	rm -rf models/

format: ## formats the code
	yapf -ri .
	isort .


############
# Training #
############

TRAIN_ARGS := logs/train/210424/ 5000 8 100

train: ## run the RL training
	python3 src/__train__.py $(TRAIN_ARGS)


#############
# Autoscale #
#############

LOG_DIR := 230424
HYPA_MODEL := PPO-1713689777/40000.zip

HYPA_ARGS := logs/scale/$(LOG_DIR) models/${HYPA_MODEL}

autoscale: ## serve policy on service
	python3 src/__autoscale__.py $(HYPA_ARGS)


##############
# Evaluation #
##############

# parmeters:
# 1. path to store files 
# 2. sample cluster each x seconds
# 3. write observation containing all gathered samples to file each x seconds
EVAL_ARGS := eval/200424_test/ 10 60

eval: ## start evaluation
	python3 src/__eval__.py $(EVAL_ARGS)

eval-setup: ## prepare containers
	python3 setup/evaluation_setup.py

# enter directory to CSV files generated by eval
PLOT_ARGS := eval/client_tier_2	

plot: ## plot diagrams
	python3 src/__plot__.py $(PLOT_ARGS)


#########
# Tools #
#########

check-environment: ## check if the RL environment is OK
	python3 src/checkenv.py

tensorboard: ## show the tensorboard
	tensorboard --logdir=logs --bind_all
